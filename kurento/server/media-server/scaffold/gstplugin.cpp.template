#include "{{prefixLowerCase}}{{nameLowercase}}.h"

#include <gst/gst.h>
#include <gst/video/video.h>
#include <gst/video/gstvideofilter.h>

#define PLUGIN_NAME "{{prefixLowerCase}}{{nameLowercase}}"
#define GST_CAT_DEFAULT {{prefixLowerCase}}_{{nameSnakeCase}}_debug
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);

#define {{prefixUpperCase}}_{{nameSnakeUpperCase}}_GET_PRIVATE(obj) \
  (G_TYPE_INSTANCE_GET_PRIVATE ((obj), \
      {{prefixUpperCase}}_TYPE_{{nameSnakeUpperCase}}, \
      {{prefixCamelCase}}{{nameCamelCase}}Private))

/* pad templates */

#define VIDEO_SRC_CAPS GST_VIDEO_CAPS_MAKE ("{ BGRA }")
#define VIDEO_SINK_CAPS GST_VIDEO_CAPS_MAKE ("{ BGRA }")

/* class initialization */

G_DEFINE_TYPE_WITH_CODE ({{prefixCamelCase}}{{nameCamelCase}},
    {{prefixLowerCase}}_{{nameSnakeCase}},
    GST_TYPE_VIDEO_FILTER,
    GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT,
        PLUGIN_NAME,
        0,
        PLUGIN_NAME " debug category"));

static GstFlowReturn
{{prefixLowerCase}}_{{nameSnakeCase}}_transform_frame_ip (
    GstVideoFilter *filter,
    GstVideoFrame *frame)
{
  {{prefixCamelCase}}{{nameCamelCase}} *self = {{prefixUpperCase}}_{{nameSnakeUpperCase}} (filter);
  (void)self; // TO-DO: Do something with it...
  return GST_FLOW_OK;
}

/*
 * dispose() should free all resources referenced from this object,
 * which might themselves hold a reference to self. Generally, the simplest
 * solution is to unref all members.
 *
 * dispose() might be called multiple times, so you must guard against
 * calling g_object_unref() on invalid GObjects by setting the member to
 * NULL; g_clear_object() can be used to do this atomically.
 */
static void
{{prefixLowerCase}}_{{nameSnakeCase}}_dispose (GObject *object)
{
  {{prefixCamelCase}}{{nameCamelCase}} *self = {{prefixUpperCase}}_{{nameSnakeUpperCase}} (object);
  (void)self; // TO-DO: Do something with it...
}

/*
 * finalize() is called when the object is destroyed.
 */
static void
{{prefixLowerCase}}_{{nameSnakeCase}}_finalize (GObject *object)
{
  {{prefixCamelCase}}{{nameCamelCase}} *self = {{prefixUpperCase}}_{{nameSnakeUpperCase}} (object);
  (void)self; // TO-DO: Do something with it...
}

/*
 * init() should be used to initialize all variables to their default values.
 */
static void
{{prefixLowerCase}}_{{nameSnakeCase}}_init ({{prefixCamelCase}}{{nameCamelCase}} *self)
{
  (void)self; // TO-DO: Do something with it...
}

static void
{{prefixLowerCase}}_{{nameSnakeCase}}_class_init ({{prefixCamelCase}}{{nameCamelCase}}Class *klass)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
  GstVideoFilterClass *video_filter_class = GST_VIDEO_FILTER_CLASS (klass);

  gst_element_class_add_pad_template (GST_ELEMENT_CLASS (klass),
      gst_pad_template_new ("src", GST_PAD_SRC, GST_PAD_ALWAYS,
          gst_caps_from_string (VIDEO_SRC_CAPS)));
  gst_element_class_add_pad_template (GST_ELEMENT_CLASS (klass),
      gst_pad_template_new ("sink", GST_PAD_SINK, GST_PAD_ALWAYS,
          gst_caps_from_string (VIDEO_SINK_CAPS)));

  gst_element_class_set_static_metadata (GST_ELEMENT_CLASS (klass),
      PLUGIN_NAME " element definition",
      "Video/Filter",
      "Element description",
      "{{gstreamerAuthor}}");

  gobject_class->dispose = {{prefixLowerCase}}_{{nameSnakeCase}}_dispose;
  gobject_class->finalize = {{prefixLowerCase}}_{{nameSnakeCase}}_finalize;

  video_filter_class->transform_frame_ip = GST_DEBUG_FUNCPTR (
      {{prefixLowerCase}}_{{nameSnakeCase}}_transform_frame_ip);
}

gboolean
{{prefixLowerCase}}_{{nameSnakeCase}}_plugin_init (GstPlugin *plugin)
{
  return gst_element_register (plugin, PLUGIN_NAME, GST_RANK_NONE,
      {{prefixUpperCase}}_TYPE_{{nameSnakeUpperCase}});
}
